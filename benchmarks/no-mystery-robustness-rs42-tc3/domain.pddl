;; Basically no-mystery domain with fix actions to remove connections
;; A connection is always removed in both directions at once. Only connections for which the allowed_to_remove predicate is set, can be removed.
;; The cost for removing a segment is also 1.
(define (domain no-mystery-strips)
   (:predicates
       (fuel-number ?x)
       (capacity-number ?x)
       (location ?x)
       (vehicle ?x)
       (fix_vehicle ?x)
       (package ?x)
       (connected ?n1 ?n2)
       (at ?v ?n)
       (in ?c ?v)
       (fuel ?n ?a)
       (capacity ?v ?s)
       (fuel-predecessor ?i ?j)
       (capacity-predecessor ?i ?j)
       (allowed_to_remove ?loc1 ?loc2))

   (:action attack_load
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (package ?c)
			  (vehicle ?v)
			  (at ?c ?n)
                          (at ?v ?n)
			  (location ?n)
                          (capacity ?v ?s2)
			  (capacity-number ?s2)
			  (capacity-predecessor ?s1 ?s2)
                          (capacity-number ?s1))
       :effect (and (not (at ?c ?n))
                    (in ?c ?v)
                    (not (capacity ?v ?s2))
                    (capacity ?v ?s1)))
   (:action attack_drive
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (at ?v ?n1)
			  (location ?n1)
			  (vehicle ?v)
                          (connected ?n1 ?n2)
			  (location ?n2)
                          (fuel ?n1 ?l2)
                          (fuel-predecessor ?l1 ?l2))
       :effect (and (not (at ?v ?n1))
                    (at ?v ?n2)
                    (not (fuel ?n1 ?l2))
                    (fuel ?n1 ?l1)))
   (:action attack_unload
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (in ?c ?v)
			  (package ?c)
			  (vehicle ?v)
                          (at ?v ?n)
			  (location ?n)
			  (capacity ?v ?s1)
                          (capacity-predecessor ?s1 ?s2))
       :effect (and (not (in ?c ?v))
                    (at ?c ?n)
                    (not (capacity ?v ?s1))
                    (capacity ?v ?s2)))
 

   (:action fix_remove_road
       :parameters (?n1 ?n2)
       :precondition (and
        (location ?n1)
        (connected ?n1 ?n2)
        (connected ?n2 ?n1)
        (allowed_to_remove ?n1 ?n2)
        (location ?n2))
       :effect (and (not (connected ?n1 ?n2))
                    (not (connected ?n2 ?n1))
                    ))
                )                                       
