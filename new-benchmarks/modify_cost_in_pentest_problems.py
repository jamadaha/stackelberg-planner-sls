import re
import sys
import argparse
import os
import math
import cmath


attacker_action_regex = "\(:action attack_[^@]*?\)\)\n\)"
attacker_action_name_regex = "attack_[^\n]*"
total_cost_regex = "increase \(total-cost\) \d*"



def parse_success_prob_cost(prob_string):
    backslash = prob_string.find("/");
    if backslash == -1:
        print("No correct success probability suffix found! Error in PDDL file?")
        exit(-1)

    numerator_string = prob_string[0:backslash]
    denominator_string = prob_string[backslash+1:]
    numerator = float(numerator_string)
    denominator = float(denominator_string)
    return int(abs(math.log2(numerator / denominator)) * 1000)

def modify_problem_file(problem_file_name):
    print(problem_file_name)

    problem_file = open(problem_file_name, "r")
    content = problem_file.read()
    problem_file.close()

    attacker_action_compiled = re.compile(attacker_action_regex)
    #attacker_actions = re.findall(attacker_action_regex, content)
    #for attacker_action in attacker_actions:
    for attacker_action in attacker_action_compiled.finditer(content):
        print(attacker_action)
        attacker_action_string = attacker_action.group()
        attacker_action_start = attacker_action.start()
        print(attacker_action_start)

        action_name = re.search(attacker_action_name_regex, attacker_action_string).group()
        print(action_name)
        whitespace = action_name.find(" ")
        if whitespace == -1:
            whitespace = len(action_name)
        everything_before_whitespace = action_name[0:whitespace]
        underscore = everything_before_whitespace.rfind("_")
        prob_string = everything_before_whitespace[underscore+1:]
        prob_num = parse_success_prob_cost(prob_string)
        print(prob_num)

        total_cost_string = re.search(total_cost_regex, attacker_action_string).group()
        cost_pos = total_cost_string.rfind(" ") + 1
        print(total_cost_string[cost_pos:])
        print(cost_pos)
        exit(0)

    #objects = re.search(objects_regex, content).group()
    #print(objects)




p = argparse.ArgumentParser(description="")
p.add_argument("--dir", type=str, help="The director in which the pentest problem files should be modified", default=None)
args = p.parse_args(sys.argv[1:])


dir = str(args.dir)
files_in_dir = os.listdir(dir)
print(files_in_dir)


print(dir)

for file in files_in_dir:
    if file.find("pddl") == -1 or file.find("domain") == -1:
        print(file + " skipped!")
    else:
        modify_problem_file(os.path.join(dir, file))
